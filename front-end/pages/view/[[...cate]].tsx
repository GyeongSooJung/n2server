import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import Footer from "../../src/components/layout/Footer";
import Header from "../../src/components/layout/Header";
import SignUp from "../../src/components/page/SignUp";
import Main from "../../src/components/page/Main";
import Find from "../../src/components/page/Find";
import { parseJwt } from "../../src/modules/parseJwt";
import FileUpload from "../../src/components/page/SignUp/Body/fileUpload";
import Approval from "../../src/components/page/SignUp/Body/approval";

interface ViewProps {
  cate: any;
  cApproval?: string;
}

const Componentitem: NextPage<any> = (props) => {
  // props 재정의
  const cate = props.cate.cate;
  const cApproval = props?.cApproval;

  // url(query) 구분
  const main = cate[0];
  const sub = cate[1] ? cate[1] : "";

  console.log("쿼리 : ", main);
  console.log("심사 : ", cApproval);
  console.log("프랍 : ", props);

  switch (main) {
    case "signup":
      return <SignUp />;
    case "main":
      if (cApproval === "before") {
        console.log("비포");
        return <FileUpload />;
      } else if (cApproval === "ing") {
        console.log("아이엔지");
        return <Approval />;
      } else {
        console.log("던");
        return <Main />;
      }
    case "find":
      return <Find />;
    default:
      return <SignUp />;
  }
};

const View: NextPage<ViewProps> = (props) => {
  // props 재정의
  const cate = props.cate.cate;
  const cApproval = props?.cApproval;
  console.log("처음 : ", props);

  return (
    <div>
      <Head>
        <title>MK SOLUTION</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        style={{ display: "flex", flexDirection: "column", minHeight: "100vh" }}
      >
        <Header {...cate} />
        <Componentitem {...props} />
        <Footer />
      </div>
    </div>
  );
};

export default View;

export const getServerSideProps: GetServerSideProps = async (context) => {
  const cate = context.query;
  const main = cate.cate ? cate.cate[0] : null;

  // 토큰 확인 - 없을 경우, 로그인 화면으로 리디렉트
  if (!context.req.cookies.mk_token) {
    if (main !== "signup" && main !== "find") {
      return {
        redirect: {
          permanent: false,
          destination: "/",
        },
      };
    } else {
      return {
        props: {
          cate,
        },
      };
    }
  } else {
    const tokenValue = parseJwt(context.req.cookies.mk_token);
    const cApproval = tokenValue.cApproval;

    return {
      props: {
        cate,
        cApproval,
      },
    };
  }
};
